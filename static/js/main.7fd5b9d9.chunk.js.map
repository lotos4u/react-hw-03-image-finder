{"version":3,"sources":["components/Searchbar/index.jsx","components/ImageGalleryItem/index.jsx","components/ImageGallery/index.jsx","components/Loader/index.jsx","components/Button/index.jsx","api/images.js","components/Modal/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","useState","text","setText","className","onSubmit","e","preventDefault","handleSubmit","type","value","autoComplete","autoFocus","placeholder","onChange","target","handleOnChange","ImageGalleryItem","onClick","image","id","handleClick","src","webformatURL","alt","ImageGallery","handleImageClick","data","images","map","i","key","GalleryLoader","color","height","width","timeout","Button","handleOnClick","axios","defaults","baseURL","Modal","HTMLDivElement","onClose","App","state","page","query","isLoading","showFull","find","setState","largeImageURL","handleCloseModal","handleCloseModalEsc","code","prevProps","prevState","snapshot","setTimeout","window","scrollTo","top","document","documentElement","scrollHeight","behavior","this","length","loadImages","more","callback","url","get","then","r","hits","catch","console","warn","getImages","newImages","finally","addEventListener","removeEventListener","handleSearchImages","handleLoadMore","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7fd5b9d9.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Searchbar = (props) => {\n\n    const [text, setText] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!text) {\n            return;\n        }\n        props.onSubmit(text);\n    }\n\n    const handleOnChange = (e) => {\n        e.preventDefault();\n        setText(e.target.value);\n    }\n\n    return <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={(e) => handleSubmit(e)}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n                <span className=\"SearchForm-button-label\">Search</span>\n            </button>\n\n            <input\n                value={text}\n                className=\"SearchForm-input\"\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search images and photos\"\n                onChange={(e) => handleOnChange(e)}\n            />\n        </form>\n    </header>\n}\n\nexport default Searchbar;","import React from 'react';\n\nconst ImageGalleryItem = (props) => {\n    const handleClick = (e) => {\n        e.preventDefault();\n        props.onClick(props.image.id);\n    }\n\n    return <li className=\"ImageGalleryItem\">\n        <img onClick={(e) => handleClick(e)}\n             src={props.image.webformatURL}\n             alt={props.image.webformatURL}\n             className=\"ImageGalleryItem-image\"/>\n    </li>\n}\n\nexport default ImageGalleryItem;","import React from 'react';\nimport ImageGalleryItem from \"../ImageGalleryItem\";\n\nconst ImageGallery = (props) => {\n    const handleImageClick = (data) => {\n        props.onClick(data);\n    }\n\n    return <ul className=\"ImageGallery\">\n        {props.images.map(i => <ImageGalleryItem key={i.id} image={i} onClick={handleImageClick}/>)}\n    </ul>\n}\n\nexport default ImageGallery;","import React from 'react';\nimport Loader from 'react-loader-spinner'\n\nconst GalleryLoader = () => (\n    <div className='Loader'>\n        <Loader\n            type=\"ThreeDots\"\n            color=\"#3f51b5\"\n            height={100}\n            width={100}\n            timeout={0}\n        />\n    </div>\n);\n\nexport default GalleryLoader;","import React from 'react';\n\nconst Button = (props) => {\n    const handleOnClick = (e) => {\n        e.preventDefault();\n        props.onClick();\n    };\n    return <button className='Button' onClick={(e) => handleOnClick(e)}>Load more</button>\n}\n\nexport default Button;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://pixabay.com/api';\n\nexport const getImages = (query, page) => {\n    const url = `/?q=${query}&page=${page}&key=18060216-54e3ca58d741e1dcf99f0c9a1&image_type=photo&orientation=horizontal&per_page=12`;\n    return axios.get(url).then(r => {\n        return r.data.hits;\n    }).catch(e => {\n        console.warn(e);\n        return e;\n    });\n}","import React from 'react';\n\nconst Modal = (props) => {\n    const handleClick = (e) => {\n        e.preventDefault();\n        if (e.target instanceof HTMLDivElement) {\n            props.onClose(props.image.id);\n        }\n    }\n\n    return <div className='Overlay' onClick={handleClick}>\n        <div className='Modal'>\n            <img src={props.image} alt={props.image}/>\n        </div>\n    </div>\n}\n\nexport default Modal;","import React, {Component} from 'react';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from \"./components/ImageGallery\";\nimport GalleryLoader from \"./components/Loader\";\nimport Button from \"./components/Button\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport {getImages} from \"./api/images\";\nimport Modal from \"./components/Modal\";\n\n\nclass App extends Component {\n    state = {\n        images: [],\n        page: 1,\n        query: '',\n        isLoading: false,\n        showFull: null,\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (snapshot) {\n            setTimeout(() => {\n                window.scrollTo({\n                    top: document.documentElement.scrollHeight,\n                    behavior: 'smooth',\n                });\n            }, 0);\n        }\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        return this.state.images.length > prevState.images.length;\n    }\n\n    handleSearchImages(text) {\n        this.setState(() => ({page: 1}), () => this.setState({query: text}, () => this.loadImages(false)));\n    };\n\n    loadImages(more, callback) {\n        this.setState({isLoading: true}, () => {\n            getImages(this.state.query, this.state.page).then((newImages) => {\n                this.setState(() => {\n                    return more ? {images: [...this.state.images, ...newImages]} : {images: [...newImages]};\n                }, () => {\n                    if (callback) {\n                        callback();\n                    }\n                });\n            }).catch(e => {\n                console.warn(e);\n            }).finally(() => this.setState({isLoading: false}));\n        });\n    };\n\n    handleLoadMore() {\n        this.setState(() => ({page: this.state.page + 1}), () => {\n            this.loadImages(true);\n        });\n    }\n\n    handleImageClick = (id) => {\n        const image = this.state.images.find(i => i.id === id);\n        this.setState({ showFull: (image ? image.largeImageURL : null) });\n    }\n\n    handleCloseModal = () => {\n        this.setState({ showFull: null });\n    }\n\n    handleCloseModalEsc = (e) => {\n        if (e.code === 'Escape') {\n            this.handleCloseModal();\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener('keydown', this.handleCloseModalEsc);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', this.handleCloseModalEsc);\n    }\n\n    render() {\n        return <div className=\"App\">\n            <Searchbar onSubmit={(data) => this.handleSearchImages(data)}/>\n            {this.state.query ? <>\n                <ImageGallery images={this.state.images} onClick={(id) => this.handleImageClick(id)}/>\n                {this.state.images.length > 0  && !this.state.isLoading ? <Button onClick={() => this.handleLoadMore()}/> : ''}\n            </> : ''}\n            {this.state.isLoading ? <GalleryLoader/> : ''}\n            {this.state.showFull ? <Modal image={this.state.showFull} onClose={() => this.handleCloseModal()}/> : ''}\n        </div>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}