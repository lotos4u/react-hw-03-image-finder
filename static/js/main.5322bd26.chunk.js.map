{"version":3,"sources":["components/Searchbar/index.jsx","components/ImageGalleryItem/index.jsx","components/ImageGallery/index.jsx","components/Loader/index.jsx","components/Button/index.jsx","api/images.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","useState","text","setText","className","onSubmit","e","preventDefault","handleSubmit","type","value","autoComplete","autoFocus","placeholder","onChange","target","handleOnChange","ImageGalleryItem","src","this","image","previewURL","alt","Component","ImageGallery","images","map","i","key","id","GalleryLoader","color","height","width","timeout","Button","onClick","handleOnClick","axios","defaults","baseURL","App","state","page","query","isLoading","setState","loadImages","more","callback","url","get","then","r","data","hits","catch","console","warn","getImages","newImages","finally","window","scrollTo","top","document","documentElement","scrollHeight","behavior","handleSearchImages","length","handleLoadMore","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5322bd26.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Searchbar = (props) => {\n\n    const [text, setText] = useState('');\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!text) {\n            return;\n        }\n        props.onSubmit(text);\n    }\n\n    const handleOnChange = (e) => {\n        e.preventDefault();\n        setText(e.target.value);\n    }\n\n    return <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={(e) => handleSubmit(e)}>\n            <button type=\"submit\" className=\"SearchForm-button\">\n                <span className=\"SearchForm-button-label\">Search</span>\n            </button>\n\n            <input\n                value={text}\n                className=\"SearchForm-input\"\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search images and photos\"\n                onChange={(e) => handleOnChange(e)}\n            />\n        </form>\n    </header>\n}\n\nexport default Searchbar;","import React, {Component} from 'react';\n\nclass ImageGalleryItem extends Component {\n    render() {\n        return <li className=\"ImageGalleryItem\">\n            <img src={this.props.image.previewURL}\n                 alt={this.props.image.previewURL}\n                 className=\"ImageGalleryItem-image\"/>\n        </li>\n    }\n}\n\nexport default ImageGalleryItem;","import React, {Component} from 'react';\nimport ImageGalleryItem from \"../ImageGalleryItem\";\n\nclass ImageGallery extends Component {\n    render() {\n        return <ul className=\"ImageGallery\">\n            {this.props.images.map(i => <ImageGalleryItem key={i.id} image={i}/>)}\n        </ul>\n    }\n}\n\nexport default ImageGallery;","import React from 'react';\nimport Loader from 'react-loader-spinner'\n\nconst GalleryLoader = () => (\n    <Loader\n        type=\"Puff\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={3000} //3 secs\n    />\n);\n\nexport default GalleryLoader;","import React from 'react';\n\nconst Button = (props) => {\n    const handleOnClick = (e) => {\n        e.preventDefault();\n        props.onClick();\n    };\n    return <button onClick={(e) => handleOnClick(e)}>Load more</button>\n}\n\nexport default Button;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://pixabay.com/api';\n\nexport const getImages = (query, page) => {\n    const url = `/?q=${query}&page=${page}&key=18060216-54e3ca58d741e1dcf99f0c9a1&image_type=photo&orientation=horizontal&per_page=12`;\n    return axios.get(url).then(r => {\n        return r.data.hits;\n    }).catch(e => {\n        console.warn(e);\n        return e;\n    });\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from \"./components/ImageGallery\";\nimport GalleryLoader from \"./components/Loader\";\nimport Button from \"./components/Button\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport {getImages} from \"./api/images\";\n\n\nclass App extends Component {\n    state = {\n        images: [],\n        page: 1,\n        query: '',\n        isLoading: false,\n    };\n\n    handleSearchImages(text) {\n        this.setState(() => ({ page: 1}), () => this.setState({query: text}, () => this.loadImages(false)));\n    };\n\n    loadImages(more, callback) {\n        this.setState({ isLoading: true }, () => {\n            getImages(this.state.query, this.state.page).then((newImages) => {\n                this.setState(() => {\n                    return more ? { images: [...this.state.images, ...newImages] } : {images: [...newImages]};\n                }, () => {\n                    if (callback) {\n                        callback();\n                    }\n                });\n            }).catch(e => {\n                console.warn(e);\n            }).finally(() => this.setState({ isLoading: false }));\n        });\n    };\n\n    handleLoadMore() {\n        this.setState(() => ({ page: this.state.page + 1 }), () => {\n            this.loadImages(true, () => {\n                window.scrollTo({\n                    top: document.documentElement.scrollHeight,\n                    behavior: 'smooth',\n                });\n            });\n        });\n    }\n\n    render() {\n        return <div className=\"App\">\n            <Searchbar onSubmit={(data) => this.handleSearchImages(data)}/>\n            {this.state.isLoading ? <GalleryLoader/> : (\n                <>\n                    <ImageGallery images={this.state.images}/>\n                    {this.state.images.length > 0 ? <Button onClick={() => this.handleLoadMore()}/> : ''}\n                </>\n            )}\n        </div>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}